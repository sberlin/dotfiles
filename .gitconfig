[alias]
	amend = commit --amend --no-edit
    ap = add --patch
	ac = "!f() { ISSUE="$(git symbolic-ref HEAD | grep --color=never -Po '(?<=/)\\w+-\\d+(?=[-_])')"; git commit -m \"${ISSUE:+${ISSUE} }${@}\"; }; git add --patch; f"
	br = branch
    brp = "!f() { git fetch --prune && git branch --no-color --verbose | grep --color=never '\\[gone\\]' | cut -f3 -d' ' | xargs -pr git branch -D; git branch --no-color | grep --color=never -v '^* ' | xargs -pr -I{} git branch -D {}; }; f"
	ci = commit
	cm = "!f() { ISSUE="$(git symbolic-ref HEAD | grep --color=never -Po '(?<=/)\\w+-\\d+(?=[-_])')"; git commit -m \"${ISSUE:+${ISSUE} }${@}\"; }; f"
	co = checkout
	coff = !git checkout $1 && git merge --ff-only @{u}
	cp = cherry-pick
	cr = commit -m 'fixup! to be reverted'
	dc = diff --cached
	d = diff
	deco = log --decorate --graph --format=fuller --all --simplify-by-decoration
	fa = fetch --all
	f = fetch
	ff = merge --ff-only
	fff = "!f() { git fetch && git merge --ff-only; }; f"
    fixa = "!f() { set -ex; FILE=$(git status --short --porcelain=v2 | head -1 | cut -f9 -d ' ' | xargs echo); LINE=$(git -c color.ui=never diff --cached --unified=0 | grep -Po '(?<=@@ -)\\d+' | head -1 | xargs echo); COMMIT=$(git blame -lws -L "${LINE}",+1 HEAD -- "${FILE}" | grep -Po '[a-f0-9]{40}' | xargs echo); git diff --cached; echo "The identified commit is:"; git show --quiet --format=fuller "${COMMIT}"; read -p 'Fix this commit automatically? (y/n) ' yn; test "${yn:-n}" == "y" && (git commit --fixup "${COMMIT}" && git stash push -k -m 'TMP commit --fix' && git rebase -i "${COMMIT}"^; git stash list | grep -s ': TMP commit --fix' && git stash pop || true;) || echo 'Aborted'; }; f"
	fix = commit --fixup
	getignore = "!gi() { curl -L -s https://www.gitignore.io/api/$@ ;}; gi"
	ignored = !git ls-files -v | grep \"^[[:lower:]]\"
	ignore = update-index --assume-unchanged
	la = log --decorate --graph --format=fuller --all
	lapu = log --decorate --graph --format=fuller --all --not --remotes
	last = log --decorate --graph --format=fuller --all --name-status
	l = log --decorate --graph --format=fuller
	lm = log --decorate --graph --format=fuller --date-order --first-parent
	lp = log --decorate --graph --format=fuller --patch
	lst = log --decorate --graph --format=fuller --name-status
	patch = format-patch -1 --stdout
    rbc = rebase --continue
    rbdev = "!f() { git stash push -k -m 'TMP rebase -i'; git checkout develop && git merge --ff-only @{u} && git checkout - && git rebase develop; git stash list | grep -s ': TMP rebase -i' && git stash pop || true; }; f"
    rbi = "!f() { git stash push -k -m 'TMP rebase -i'; git rebase -i "${@}"; git stash list | grep -s ': TMP rebase -i' && git stash pop || true; }; f"
    rb = rebase
	rh = reset --hard
	rmi = "!f() { git ls-files --others --exclude-standard $@ | xargs --interactive --replace={} rm {}; }; f"
	st = status
	unignore = update-index --no-assume-unchanged
[color]
	ui = always
[core]
	autocrlf = input
	editor = vim
	pager = less -r
[i18n]
	commitencoding = utf8
[merge]
	tool = meld
[mergetool "meld"]
	cmd = meld \"$LOCAL\" \"$MERGED\" \"$REMOTE\" --output \"$MERGED\"
[push]
	default = current
[rebase]
	autosquash = true
[user]
	name = sberlin
	email = sberlin@users.noreply.github.com
